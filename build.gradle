plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenLocal()
    maven { url = "https://modmaven.dev/" }
    maven { url = "https://minecraft.guntram.de/maven/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.wispforest.io/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url = "https://maven.cafeteria.dev" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://api.modrinth.com/maven/" }
    maven { url 'https://maven.blamejared.com' }
    maven {
        url = uri("https://storage.googleapis.com/devan-maven/")
    }


    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "vazkii.patchouli:Patchouli:1.18.2-67-FABRIC"
    modImplementation("net.devtech:arrp:0.5.7")

    //Twilight forest compat
    //modImplementation "teamtwilight:twilightforest:4.1.1102:universal"

    //continuity testing
    //modImplementation "curse.maven:continuity-531351:3822250"

    //alloygery testing
    //modImplementation "curse.maven:alloygery-573592:3778894"
    //modImplementation "curse.maven:nbtcrafting-314633:3707208"

    //Therassium testing
    //modImplementation "curse.maven:therassium-554562:3829121"
    //modImplementation "de.guntram.mcmod:crowdin-translate:1.4+1.18.2"

    //mythicmetals testing
    //modImplementation "curse.maven:alloy-forgery-438718:3758381"
    //modImplementation "curse.maven:cloth-config-348521:3782775"
    //modImplementation "curse.maven:mythicmetals-410127:3725977"
    //modImplementation "curse.maven:owo-lib-532610:3824297"
    //modImplementation 'com.github.Draylar:magna:1.7.0-1.18.2'

    //Polymorph testing

    //modImplementation "curse.maven:cardinal-components-318449:3669769"
    //modImplementation "curse.maven:cardinal-components-318449:3669770"
    //modImplementation "curse.maven:cardinal-components-318449:3669771"
    //modImplementation "curse.maven:cardinal-components-318449:3669774"
    //modImplementation "curse.maven:cardinal-components-318449:3669773"
    //modImplementation "curse.maven:polymorph-397434:3793108"

    modImplementation 'com.ptsmods:devlogin:2.1'
    include "net.devtech:arrp:0.5.7"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/sigmundgranaas/forgero"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}


curseforge {
    apiKey = System.getenv("CurseForgeApiKey") ?: ""
    project {
        id = '581435'
        changelogType = "markdown"
        changelog = file('changelog.md')

        releaseType = 'release'
        addGameVersion project.minecraft_version
        addGameVersion 'Fabric'
        addGameVersion "Java 17"

        mainArtifact(remapJar) {
            displayName = "Forgero [Fabric]: $project.version"
            relations {
                embeddedLibrary 'arrp'
                requiredDependency 'fabric-api'
                optionalDependency 'patchouli'
            }
        }
    }
    options {
        forgeGradleIntegration = false // defaults to true
    }
}

sourceSets {
    forgero {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += test.compileClasspath
        runtimeClasspath += test.runtimeClasspath
    }
}

loom {
    runs {
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"

            source sourceSets.test
        }
        gametest {
            inherit testmodServer

            name "Game Test"


            // Enable the gametest runner
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
        autoTestServer {
            inherit testmodServer

            name "Auto Test Server"
            vmArg "-Dfabric.autoTest"
        }

        gametestClient {
            inherit testmodServer
            client()

            name "test client"
            //vmArg "-Dfabric.autoTest"
        }
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = 32
    testLogging.events("failed")
    testLogging.info.events = ["failed", "skipped"]
}

//test.dependsOn runGametest
